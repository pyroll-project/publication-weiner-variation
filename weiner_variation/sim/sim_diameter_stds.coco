# ---
# jupyter:
#   jupytext:
#     formats: ipynb,coco:percent
#     text_representation:
#       extension: .coco
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.14.5
#   kernelspec:
#     display_name: Coconut
#     language: coconut
#     name: coconut
# ---

# %%
from weiner_variation.sim.data_structures import DrawInput
from weiner_variation.sim.process import PASS_SEQUENCE, DIAMETER, TEMPERATURE, create_in_profile
from weiner_variation.sim.config import SAMPLE_COUNT, FIELDS, SEED
from weiner_variation.config import DATA_DIR
from weiner_variation.sim.task_sim_diameter_stds import FACTORS

import pandas as pd
import numpy as np
from scipy.stats import norm
from copy import deepcopy
import tqdm
from multiprocessing import Pool

# %%
import pyroll.basic as pr

# %%
nominal = DrawInput(DIAMETER, TEMPERATURE)

# %%
input_dist = pd.read_csv(DATA_DIR / "input_dist.csv", index_col=0, header=0)
input_dist

# %%
def worker(draw: DrawInput):    
    ip = create_in_profile(
            diameter=draw.diameter,
            temperature=draw.temperature,
    )

    sequence = deepcopy(PASS_SEQUENCE)
    sequence.solve(ip)       

    return (
        draw.__dict__.items() |> map$(t -> (("draw", t[0]), t[1])) |> dict
    ) | (
        FIELDS.items()
        |> starmap$((key, extractor) -> (
                sequence.units 
                |> filter$(u -> isinstance(u, pr.RollPass)) 
                |> map$(u -> ((key, u.label), extractor(u))) 
                |> filter$(t -> t[1] is not None)
            )
        )
        |> flatten
        |> dict            
    )

# %%
for f in FACTORS:
    diameter_dist = norm(loc=input_dist.loc["diameter", "mean"], scale=input_dist.loc["diameter", "std"] * f)
    temperature_dist = norm(loc=input_dist.loc["temperature", "mean"], scale=input_dist.loc["temperature", "std"])
    
    RNG = np.random.default_rng(SEED)
    diameters = diameter_dist.rvs(random_state=RNG, size=SAMPLE_COUNT)
    temperatures = temperature_dist.rvs(random_state=RNG, size=SAMPLE_COUNT)

    draws = [nominal] + [
        DrawInput(d, t)
        for d, t in zip(diameters, temperatures)
    ]
    results = tqdm.tqdm(Pool().imap(worker, draws), total=SAMPLE_COUNT) |> list
    df = results |> enumerate |> dict |> pd.DataFrame |> .T |> .infer_objects()
    df.to_csv(DATA_DIR / "sim_diameter_stds_results" / f"{f}.csv")

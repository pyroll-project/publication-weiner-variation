# ---
# jupyter:
#   jupytext:
#     formats: ipynb,coco:percent
#     text_representation:
#       extension: .coco
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.14.5
#   kernelspec:
#     display_name: Coconut
#     language: coconut
#     name: coconut
# ---

# %%
from weiner_variation.sim.data_structures import DrawDurations
from weiner_variation.sim.process import PASS_SEQUENCE, DIAMETER, TEMPERATURE, create_in_profile, REVERSING_PAUSE_DURATION
from weiner_variation.sim.config import SAMPLE_COUNT, FIELDS, SEED
from weiner_variation.config import DATA_DIR

import pandas as pd
import numpy as np
from scipy.stats import norm, gamma
from copy import deepcopy
import tqdm
from multiprocessing import Pool

# %%
import pyroll.basic as pr

# %%
df_input = pd.read_csv(DATA_DIR / "input_dist.csv", index_col=0, header=0)
df_input

# %%
df_durations = pd.read_csv(DATA_DIR / "duo_pauses_dist.csv", header=0, index_col=0)
df_durations

# %%
diameter_dist = norm(loc=df_input.loc["diameter", "mean"], scale=df_input.loc["diameter", "std"])
temperature_dist = norm(loc=df_input.loc["temperature", "mean"], scale=df_input.loc["temperature", "std"])
durations_dist = gamma(a=df_durations["alpha"]["all"], scale=df_durations["beta"]["all"], loc=df_durations["loc"]["all"])
durations_dist_last = gamma(a=df_durations["alpha"]["R10-F1"], scale=df_durations["beta"]["R10-F1"], loc=df_durations["loc"]["R10-F1"])

# %%
RNG = np.random.default_rng(SEED)
diameters = diameter_dist.rvs(random_state=RNG, size=SAMPLE_COUNT)
temperatures = temperature_dist.rvs(random_state=RNG, size=SAMPLE_COUNT)
durations = np.concatenate([
    durations_dist.rvs(random_state=RNG, size=(SAMPLE_COUNT, 9)), 
    durations_dist_last.rvs(random_state=RNG, size=(SAMPLE_COUNT, 1))
], axis=1)

draws = [
    DrawDurations(d, t, dur)
    for d, t, dur in zip(diameters, temperatures, durations)
]

# %%
def worker(draw: DrawDurations):    
    ip = create_in_profile(
            diameter=draw.diameter,
            temperature=draw.temperature,
    )

    sequence = deepcopy(PASS_SEQUENCE)  
    
    transports = [u for u in sequence if isinstance(u, pr.Transport)]
    for t, d in zip(transports, draw.durations):
        t.duration = d
    
    sequence.solve(ip)       

    return (
        draw.__dict__.items() |> map$(t -> (("draw", t[0]), t[1])) |> dict
    ) | (
        FIELDS.items()
        |> starmap$((key, extractor) -> (
                sequence.units 
                |> filter$(u -> isinstance(u, pr.RollPass)) 
                |> map$(u -> ((key, u.label), extractor(u))) 
                |> filter$(t -> t[1] is not None)
            )
        )
        |> flatten
        |> dict            
    )

# %%
results = tqdm.tqdm(Pool().imap(worker, draws), total=SAMPLE_COUNT) |> list

# %%
df = results |> filter$(e -> "error" not in e) |> enumerate |> dict |> pd.DataFrame |> .T |> .infer_objects()
df

# %%
df.to_csv(DATA_DIR / "sim_durations_results.csv")

# %%
